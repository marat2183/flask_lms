version: "3.8"
services:
  flask:
    build:
      context: .
      dockerfile: Dockerfile
      target: "${TARGET:-prod}"
    container_name: flask
    restart: unless-stopped
    env_file:
      - .env
      - .mongo.env
    environment:
      FLASK_ENV: "production"
      FLASK_DEBUG: "False"
      FLASK_PORT: 5000
      FLASK_CONFIG: "docker"
    depends_on:
      - redis
      - mongo
    ports:
      - 5678:5678
    networks:
      - frontend
      - backend

  mongo:
    image: mongo:latest
    restart: unless-stopped
    container_name: mongo
    env_file: .mongo.env
    volumes:
      - ./docker/mongo/init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh
      - mongodata:/data/db
      - mongoconfig:/data/configdb
    ports:
    - "27017:27017"
    networks:
      - backend
      - frontend

  webserver:
    build: docker/nginx
    container_name: nginx
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_NAME: "webserver"
      APP_DEBUG: "true"
      SERVICE_NAME: "webserver"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginxdata:/var/log/nginx
    depends_on:
      - flask
    networks:
      - frontend

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    volumes:
      - redisdata:/data/redis
    command: ["redis-server", "--appendonly", "yes"]
    hostname: redis
    ports:
    - "6379:6379"
    networks:
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  redisdata:
    driver: local
  mongodata:
    driver: local
  mongoconfig:
    driver: local
  appdata:
    driver: local
  nginxdata:
    driver: local
